from equipment_slots import EquipmentSlots

class Equipment:
    def __init__(self, main_hand=None, off_hand=None):
        self.main_hand = main_hand
        self.off_hand = off_hand

        @property
        def max_hp_bonus(self):
            bonus = 0

            if self.main_hand and self.main_hand.equippable:
                bonus += self.main_hand.equippable.max_hp_bonus

            if self.off_hand and self.off_hand.equippable:
                bonus += self.off_hand.equippable.max_hp_bonus

            return bonus

        @property
        def power_bonus(self):
            if self.main_hand and self.main_hand.equippable:
                bonus += self.main_hand.equippable.power_bonus

            if self.off_hand and self.off_hand.equippable:
                bonus += self.off_hand.equippable.power_bonus

            return bonus
                
        @property
        def defense_bonus(self):
            if self.main_hand and self.main_hand.equippable:
                bonus += self.main_hand.equippable.power_bonus

            if self.off_hand and self.off_hand.equippable:
                bonus += self.off_hand.equippable.power_bonus

            return bonus


        def toggle_equip(self, equippable_entity):
            #Equippable_entity is item which can be equipped
            results = []

            # get slot in which item should be equipped
            slot = equippable_entity.equippable.slot

            # If item is should be put in MAIN_HAND slot variants:
            # 1. check whether it is already in that slot if it is there then dequip this item 
            # 2. check whether there is another item if so deequip it

            #  once slot is empty equip new item
            if slot == EquipmentSlots.MAIN_HAND:
                if self.main_hand == equippable_entity:
                    self.main_hand = None
                    results.append({'dequipped': equippable_entity})
                else:
                    if self.main_hand:
                        results.append({'dequipped': self.main_hand})

                    self.main_hand = equippable_entity
                    results.append({'equipped': equippable_entity})
                    
            elif slot == EquipmentSlots.OFF_HAND:
                if self.off_hand == equippable_entity:
                    self.off_hand = None
                    results.append({'dequipped': equippable_entity})
                else:
                    if self.off_hand:
                        results.append({'dequipped': self.off_hand})

                    self.off_hand = equippable_entity
                    results.append({'equipped': equippable_entity})

            return results
